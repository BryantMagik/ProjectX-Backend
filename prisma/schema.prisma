// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  first_name          String
  last_name           String
  password            String
  type_user           UserType  @default(TRAINEE )
  role                Role_User @default(USER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdTasks        Task[]    @relation("CreatedTasks")
  assignedTasks       Task[]    @relation("AssignedTasks")
  participantProjects Project[] @relation("ProjectParticipants")
  authoredProjects    Project[] @relation("ProjectAuthors")
  comments            Comment[] @relation
  issues              Issue[]   @relation
  subtasks            subtask[] @relation("Subtasksauthor") 
}

enum UserType {
  TRAINEE           
  DEVELOPER
  MANAGER
  DESIGNER
  QA
  PRODUCT_OWNER
}

enum Role_User {
  USER
  ADMIN
}

model Project {
  id           String         @id @default(cuid())
  code         String         @unique
  name         String
  description  String
  type         Project_Type
  status       Project_Status
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  authorId     String         
  author       User           @relation("ProjectAuthors", fields: [authorId], references: [id])
  tasks        Task[]         @relation("ProjectTasks")
  participants User[]         @relation("ProjectParticipants")
  issues      Issue[]       @relation
}

enum Project_Type {
  SOFTWARE
  EXTERNAL
  RESEARCH
  INTERNAL
}

enum Project_Status {
  ONGOING
  ONWAIT
  COMPLETED
}

model Task {
  id          String        @id @default(cuid())
  code        String        @unique
  summary     String         
  description String
  priority    Task_priority
  task_type   Task_type
  status      Task_status
  projectId   String
  project     Project       @relation("ProjectTasks", fields: [projectId], references: [id])
  creatorId   String
  creator     User          @relation("CreatedTasks", fields: [creatorId], references: [id])
  users       User[]        @relation("AssignedTasks")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comments    Comment[]     @relation("TaskComments")
  subtasks    subtask[]     @relation("TaskSubtask")
}

enum Task_priority {
  HIGH
  MEDIUM
  LOW
}

enum Task_type {
  BUG
  FEATURE_REQUEST
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Task_status {
  PENDING
  ONGOING
  COMPLETED
}

model subtask {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(255)
  description   String?   
  status        Task_status
  taskId        String
  creation_date DateTime  @default(now())
  update_date   DateTime  @updatedAt
  task          Task      @relation("TaskSubtask",fields: [taskId], references: [id])
  authorId      String   
  author        User     @relation("Subtasksauthor",fields: [authorId], references: [id])
}

model Comment {
  id          String        @id @default(cuid())
  body        String
  date        DateTime @default(now())
  updatedAt   DateTime      @updatedAt
  taskId      String?
  task        Task?         @relation("TaskComments", fields: [taskId], references: [id])
  issueId     String?
  issue       Issue?        @relation("IssueComments", fields: [issueId], references: [id])
  authorId    String   
  author      User     @relation(fields: [authorId], references: [id])
}

enum IssueType {
  BUG
  FEATURE_REQUEST
}

enum IssueStatus {
  PENDING
  ONGOING
  COMPLETED
}

model Issue {
  id           String      @id @default(cuid())
  code         String      @unique @map("code")          
  type         IssueType                               
  summary      String      @map("summary")              
  description  String?     @map("description")          
  priority     Task_priority                           
  projectId    String                                  
  project      Project     @relation(fields: [projectId], references: [id])
  reporterId   String                                  
  reporter     User        @relation(fields: [reporterId], references: [id])
  status       IssueStatus                             
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comments     Comment[]   @relation("IssueComments")
}