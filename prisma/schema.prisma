// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  first_name          String
  last_name           String
  password            String
  role                Role_User @default(USER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  authoredProjects    Project[] @relation("AuthorProject")
  createdTasks        Taks[]    @relation("CreatedTasks")
  assignedTasks       Taks[]    @relation("AssignedTasks")
  participantProjects Project[] @relation("ProjectParticipants")
}

enum Role_User {
  USER
  ADMIN
}

model Project {
  id           String         @id @default(cuid())
  code         String         @unique
  name         String
  description  String
  type         Project_Type
  status       Project_Status
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  author       User           @relation("AuthorProject", fields: [userId], references: [id])
  taks         Taks[]         @relation("ProjectTasks")
  participants User[]         @relation("ProjectParticipants")
}

enum Project_Type {
  SOFTWARE
  EXTERNAL
  RESEARCH
  INTERNAL
}

enum Project_Status {
  ONGOING
  ONWAIT
  COMPLETED
}

model Taks {
  id          String        @id @default(cuid())
  code        String        @unique
  sumary      String
  description String
  priority    Task_priority
  task_type   Task_type
  status      Task_status
  projectId   String
  project     Project       @relation("ProjectTasks", fields: [projectId], references: [id])
  creatorId   String
  creator     User          @relation("CreatedTasks", fields: [creatorId], references: [id])
  users       User[]        @relation("AssignedTasks")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Task_priority {
  HIGH
  MEDIUM
  LOW
}

enum Task_type {
  BUG
  FEATURE_REQUEST
}

enum Task_status {
  PENDING
  ONGOING
  COMPLETED
}

model subtask {
  id String @id @default(cuid())
}
